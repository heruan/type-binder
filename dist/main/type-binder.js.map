{"version":3,"sources":["../../src/main/type-binder.ts"],"names":[],"mappings":"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","file":"type-binder.js","sourcesContent":["import \"reflect-metadata\";\nimport * as metadataKeys from \"./metadata-keys\";\n\nexport class TypeBinder {\n\n    private objectInstances: Map<any, Map<any, Object>> = new Map<any, Map<any, Object>>();\n\n    private identityBinding = (value, generics) => value;\n\n    private bindingCallbacks: Map<any, (value: any, generics: any[], current?: any) => any>;\n\n    public constructor() {\n        this.bindingCallbacks = new Map<any, (value: any, generics: any[]) => any>();\n        this.bindingCallbacks.set(Map, (value: [any, any][], generics: any[] = [], current: Map<any, any> = new Map()) => {\n            current.clear();\n            value.forEach(pair => current.set(this.bind(pair[0], generics[0]), this.bind(pair[1], generics[1])));\n            return current;\n        });\n        this.bindingCallbacks.set(Set, (value: any[], generics: any[] = [], current: Set<any> = new Set()) => {\n            current.clear();\n            value.forEach(element => current.add(this.bind(element, generics[0])));\n            return current;\n        });\n        this.bindingCallbacks.set(Array, (value: any[], generics: any[] = [], current: any[] = []) => {\n            current.splice(0, current.length, ...value.map(element => this.bind(element, generics[0])));\n            return current;\n        });\n        this.bindingCallbacks.set(Number, this.identityBinding);\n        this.bindingCallbacks.set(String, this.identityBinding);\n        this.bindingCallbacks.set(Boolean, this.identityBinding);\n        this.bindingCallbacks.set(undefined, this.identityBinding);\n    }\n\n    public setBindingCallback(type: any, callback: (value: any, generics: any[]) => any): void {\n        this.bindingCallbacks.set(type, callback);\n    }\n\n    public bind<T>(value: any, type: new(...args) => T, ...generics: any[]): T {\n        return this.update(value, type, generics);\n    }\n\n    public update<T>(value: any, type: new(...args) => T, generics: any[], current?: T): T {\n        if (Array.isArray(type)) {\n            generics = type.slice(1);\n            type = type.shift();\n        }\n        if (this.bindingCallbacks.has(type)) {\n            return this.bindingCallbacks.get(type)(value, generics, current);\n        } else if (value !== null && typeof value === \"object\") {\n            let object = this.createObject(type, value);\n            let properties = this.createProperties(type, object, value);\n            return Object.defineProperties(object, properties);\n        } else {\n            return value;\n        }\n    }\n\n    public isBound<T>(type: new(...args) => T, entity: T): boolean {\n        if (Reflect.hasMetadata(metadataKeys.binderIdentifierKey, type)) {\n            let scope = Reflect.getMetadata(metadataKeys.binderIdentifierScope, type) || type;\n            let key = Reflect.getMetadata(metadataKeys.binderIdentifierKey, type)(entity, this);\n            if (this.objectInstances.has(scope) && this.objectInstances.get(scope).has(key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private createObject<T>(type: new(...args) => T, source: any): T {\n        let object: T;\n        if (Reflect.hasMetadata(metadataKeys.binderIdentifierKey, type)) {\n            let scope = Reflect.getMetadata(metadataKeys.binderIdentifierScope, type) || type;\n            let key = Reflect.getMetadata(metadataKeys.binderIdentifierKey, type)(source, this);\n            if (this.objectInstances.has(scope) && this.objectInstances.get(scope).has(key)) {\n                object = <T> this.objectInstances.get(scope).get(key);\n            } else {\n                object = Object.create(type.prototype);\n                if (!this.objectInstances.has(scope)) {\n                    this.objectInstances.set(scope, new Map<any, Object>());\n                }\n                this.objectInstances.get(scope).set(key, object);\n            }\n        } else {\n            object = Object.create(type.prototype);\n        }\n        return object;\n    }\n\n    private createProperties<T>(type: new(...args) => T, target: T, source: Object): PropertyDescriptorMap {\n        let properties: PropertyDescriptorMap = {};\n        Object.getOwnPropertyNames(source).forEach(property => {\n            let propertyType = Reflect.getMetadata(metadataKeys.designType, type.prototype, property);\n            let propertyGenerics = Reflect.getMetadata(metadataKeys.designGenericTypes, type.prototype, property);\n            let configurable = true;\n            let enumerable = true;\n            let writable = true;\n            let value = propertyType\n                ? this.update(source[property], propertyType, propertyGenerics, target[property])\n                : source[property];\n            properties[property] = { configurable, enumerable, writable, value };\n            if (Reflect.hasMetadata(metadataKeys.binderPropertyTrack, type.prototype, property)) {\n                let trackingCallback: <V>(value: V) => V = Reflect.getMetadata(metadataKeys.binderPropertyTrack, type.prototype, property);\n                let value = trackingCallback(properties[property].value);\n                Reflect.defineMetadata(metadataKeys.binderPropertyTrackValue, value, target, property);\n            }\n            if (Reflect.hasMetadata(metadataKeys.binderPropertyEntries, type.prototype, property)) {\n                let trackingCallback: <I extends Iterable<V>, V>(iterable: I) => V[] = Reflect.getMetadata(metadataKeys.binderPropertyEntries, type.prototype, property);\n                let value = trackingCallback(properties[property].value);\n                Reflect.defineMetadata(metadataKeys.binderPropertyEntriesValue, value, target, property);\n            }\n        });\n        return properties;\n    }\n\n    public static propertyHasChanged(object: Object, property: string): boolean {\n        if (Reflect.hasMetadata(metadataKeys.binderPropertyTrackValue, object, property)) {\n            let currentValue = object[property];\n            let originalValue = Reflect.getMetadata(metadataKeys.binderPropertyTrackValue, object, property);\n            return currentValue !== originalValue;\n        } else {\n            return false;\n        }\n    }\n\n}\n"]}